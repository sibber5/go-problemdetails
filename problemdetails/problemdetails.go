// SPDX-License-Identifier: BSD-3-Clause
// Copyright (c) 2025 sibber (GitHub: sibber5)

package problemdetails

import (
	"bytes"
	"encoding/json"
	"net/http"
)

// This is not meant to be used directly. Only read from if using `problemdetails.ProblemDetailsContext`.
type ProblemDetails struct {
	Schema string `json:"$schema,omitempty"`

	Type     string `json:"type"`               // A URI reference that identifies the problem type.
	Status   int    `json:"status"`             // The HTTP status code generated by the origin server for this occurrence of the problem.
	Title    string `json:"title"`              // A short, human-readable summary of the problem type.
	Detail   string `json:"detail,omitempty"`   // A human-readable explanation specific to this occurrence of the problem.
	Instance string `json:"instance,omitempty"` // A URI reference that identifies the specific occurrence of the problem. It may or may not yield further information if dereferenced.

	RequestId string `json:"requestId,omitempty"` // [AdditionalMember]
	TraceId   string `json:"traceId,omitempty"`   // [AdditionalMember]

	Code   string  `json:"code,omitempty"`   // [AdditionalMember] An API specific error code aiding the provider team understand the error based on their own potential taxonomy or registry.
	Errors []Error `json:"errors,omitempty"` // [AdditionalMember] An array of error details to accompany a problem details response.
}

type Error struct {
	Detail    string `json:"detail"`              // A granular description on the specific error related to a body property, query parameter, path parameters, and/or header.
	Pointer   string `json:"pointer,omitempty"`   // A JSON Pointer to a specific request body property that is the source of error.
	Parameter string `json:"parameter,omitempty"` // The name of the query or path parameter that is the source of error.
	Header    string `json:"header,omitempty"`    // The name of the header that is the source of error.
	Code      string `json:"code,omitempty"`      // A string containing additional provider specific codes to identify the error context.
}

// pointer: A JSON Pointer to a specific request body property that is the source of error.
//
// detail: A granular description on the specific error related to the body property.
//
// code: A string containing additional provider specific codes to identify the error context.
func NewBodyError(pointer string, detail string, code string) Error {
	return Error{Pointer: pointer, Detail: detail, Code: code}
}

// parameter: The name of the query or path parameter that is the source of error.
//
// detail: A granular description on the specific error related to the query parameter.
//
// code: A string containing additional provider specific codes to identify the error context.
func NewParameterError(parameter string, detail string, code string) Error {
	return Error{Parameter: parameter, Detail: detail, Code: code}
}

// header: The name of the header that is the source of error.
//
// detail: A granular description on the specific error related to the header.
//
// code: A string containing additional provider specific codes to identify the error context.
func NewHeaderError(header string, detail string, code string) Error {
	return Error{Header: header, Detail: detail, Code: code}
}

// detail: A granular description on the specific error related to a body property, query parameter, path parameters, header, or whatever else the cause is.
//
// code: A string containing additional provider specific codes to identify the error context.
func NewGenericError(detail string, code string) Error {
	return Error{Detail: detail, Code: code}
}

var defaultWriter = &Writer{}

// Default returns the default ProblemDetailsWriter.
func Default() *Writer {
	return defaultWriter
}

// SetDefault sets the default ProblemDetailsWriter to pdw, which is used by the top-level function Write.
func SetDefault(pdw *Writer) {
	defaultWriter = pdw
}

// Writes a problem details http response using the default problem details writer.
//
// detail: A human-readable explanation specific to this occurrence of the problem.
//
// code: [Optional] An API specific error code aiding the provider team understand the error based on their own potential taxonomy or registry.
//
// errors: [Optional] An array of error details to accompany a problem details response.
//
// Returns error if there were invalid arguments, but writes the problem details response either way.
func Write(w http.ResponseWriter, r *http.Request, status int, detail string, code string, errors ...Error) {
	Default().Write(w, r, status, detail, code, errors...)
}

type Writer struct {
	GetCtxStatusCode     func(*http.Request) int    // A function that gets the status code for the current response from the request context in order to verify that it is the expected value. If nil or if the returned value is 0, it won't be checked.
	GetRequestID         func(*http.Request) string // A function that gets the request ID to write in the problem details response. If nil or if the returned value is "", the request ID field will be omitted.
	GetTraceID           func(*http.Request) string // A function that gets the trace ID to write in the problem details response. If nil or if the returned value is "", the trace ID field will be omitted.
	ProblemDetailsSchema string                     // The json schema for the problem details response. For example, https://www.rfc-editor.org/rfc/rfc9457.html#name-json-schema-for-http-proble. If "" the $schema field will be omitted.
}

// Writes a problem details http response.
//
// detail: A human-readable explanation specific to this occurrence of the problem.
//
// code: [Optional] An API specific error code aiding the provider team understand the error based on their own potential taxonomy or registry.
//
// errors: [Optional] An array of error details to accompany a problem details response.
//
// Returns error if there were invalid arguments, but writes the problem details response either way.
func (pdw *Writer) Write(w http.ResponseWriter, r *http.Request, status int, detail string, code string, errors ...Error) {
	var typeUri string
	switch status {
	case http.StatusNotFound:
		typeUri = "https://problems-registry.smartbear.com/not-found"
	case http.StatusUnauthorized:
		typeUri = "https://problems-registry.smartbear.com/unauthorized"
	case http.StatusForbidden:
		typeUri = "https://problems-registry.smartbear.com/forbidden"
	case http.StatusBadRequest:
		typeUri = "https://problems-registry.smartbear.com/bad-request"
	case http.StatusServiceUnavailable:
		typeUri = "https://problems-registry.smartbear.com/service-unavailable"
	case http.StatusInternalServerError:
		typeUri = "https://problems-registry.smartbear.com/server-error"
	default:
		typeUri = "about:blank"
	}

	pd := pdw.newProblemDetails(
		r,
		typeUri,
		status,
		http.StatusText(status),
		detail,
		code,
		errors,
	)

	err := marshalJSON(w, pd)

	pdCtx, ok := r.Context().Value(CtxKey).(*Context)
	if ok {
		pdCtx.pd = pd
		pdCtx.respWriteErr = err
	}
}

func (pdw *Writer) newProblemDetails(r *http.Request, typeUri string, status int, title string, detail string, code string, errors []Error) *ProblemDetails {
	requestId := ""
	if pdw.GetRequestID != nil {
		requestId = pdw.GetRequestID(r)
	}
	traceId := ""
	if pdw.GetTraceID != nil {
		traceId = pdw.GetTraceID(r)
	}

	pd := &ProblemDetails{
		Schema: pdw.ProblemDetailsSchema,
		Type:   typeUri,
		Status: status,
		Title:  title,
		Detail: detail,

		RequestId: requestId,
		TraceId:   traceId,

		Code:   code,
		Errors: errors,
	}

	return pd
}

func marshalJSON(w http.ResponseWriter, pd *ProblemDetails) error {
	buf := &bytes.Buffer{}
	enc := json.NewEncoder(buf)
	enc.SetEscapeHTML(true)
	if err := enc.Encode(pd); err != nil {
		http.Error(w, err.Error(), http.StatusInternalServerError)
		return err
	}

	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(pd.Status)
	_, err := w.Write(buf.Bytes())
	return err
}
